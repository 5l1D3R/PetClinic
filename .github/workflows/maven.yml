# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build-and-test

on: 
 push:
  branches: main
 pull_request:
 
env:
 org_name: octodemo
 repo_name: spring-petclinic
 image_name: spring-petclinic

jobs:
  build-and-test-matrix:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [ 8, 11, 15 ]

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
       path: ~/.m2/repository
       key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
       restore-keys: |
        ${{ runner.os }}-maven-
    - name: Setup Java and Build
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: ${{ matrix.java-version }}
    - run: mvn -B install --no-transfer-progress --file pom.xml
      
  build-image-and-publish:
    runs-on: ubuntu-latest
    needs: [build-and-test-matrix]
    env:
      USERNAME: 'omearaj'
      IMG_NAME: 'spring-petclinic'
      REGISTRY: 'ghcr.io'
      BUILDER: 'paketobuildpacks/builder:base'
      IMAGE_NAME: 'ghrc.io/omearaj/spring-petclinic'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
       path: ~/.m2/repository
       key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
       restore-keys: |
        ${{ runner.os }}-maven-
        
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.OCTODEMO_PAT }}
   
    - uses: andrioid/setup-pack@v1.0.1
   
    - name: "ðŸ˜† Image using Pack"
      run: |
        pack build ghcr.io/octodemo/spring-petclinic/spring-petclinic:${{ github.sha }} --builder paketobuildpacks/builder:base --env 'BP_JVM_VERSION=8.*' --tag ghcr.io/octodemo/spring-petclinic/spring-petclinic:latest --publish
    
    - uses: anchore/scan-action@v2
      id: scan
      with:
        image: "ghcr.io/octodemo/spring-petclinic/spring-petclinic:latest"
        acs-report-enable: true
    - name: upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
    
    - name: Run Snyk to check Docker image for vulnerabilities
      # Snyk can be used to break the build when it detects vulnerabilities.
      # In this case we want to upload the issues to GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/octodemo/spring-petclinic/spring-petclinic:latest
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: snyk.sarif
