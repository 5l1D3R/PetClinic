name: JFrog - Home Assignment

on:
  push:
    branches: [ main, jfrog_assignment ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      JF_REPO_NAME: danvid.jfrog.io
      JF_REPO_PATH: spring-petclinic-docker
      IMAGE_NAME: "spring-petclinic"
      SCA_REPORT_FILE: jfrog_sca_report.json

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'corretto'
          cache: maven
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Compile the code
        run: ./mvnw -B package -D skipTests
      - name: Run the tests
        run: ./mvnw test
      - name: Package the project as a runnable Docker image
        run: |
          jf docker build -t ${{ env.JF_REPO_NAME }}/${{ env.JF_REPO_PATH }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -t ${{ env.JF_REPO_NAME }}/${{ env.JF_REPO_PATH }}/${{ env.IMAGE_NAME }}:latest .

      - name: Scan the project with your preferred SCA tool
        run: |
          jf docker scan --format json ${{ env.JF_REPO_NAME }}/${{ env.JF_REPO_PATH }}/${{ env.IMAGE_NAME }}:${{ github.sha }} > ${{ env.SCA_REPORT_FILE }}
      - name: Assign the SCA report to this Github Action workflow as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: sca_report
          path: ${{ env.SCA_REPORT_FILE }}

      - name: Bonus part Publish the image to JFrog Artifactory in your pipeline (using the SaaS trial)
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: spring-petclinic
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Push Docker Image to Artifactory
          jf docker push ${{ env.JF_REPO_NAME }}/${{ env.JF_REPO_PATH }}/${{ env.IMAGE_NAME }} --all-tags
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
          # Publish the local SCA scan report
          jf rt upload ${{ env.SCA_REPORT_FILE }} ${{ env.JF_REPO_NAME }}/${{ env.JF_REPO_PATH }}/${{ env.SCA_REPORT_FILE }}_${{ env.IMAGE_NAME }}:${{ github.sha }}

    