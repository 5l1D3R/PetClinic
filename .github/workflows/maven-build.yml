# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: JFrog - Home Assignment

on:
  push:
    branches: [ main, jfrog_assignment ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'corretto'
          cache: maven

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Compile the code
        run: ./mvnw -B package -D skipTests
      - name: Run the tests
        run: ./mvnw test

      - name: Package the project as a runnable Docker image
        env:
          IMAGE_NAME: danvid.jfrog.io/assignment-docker/spring-petclinic:${{ github.sha }}
        run: |
          jf docker build -t $IMAGE_NAME .

      - name: Scan the project with your preferred SCA tool
        run: |
          jf docker scan danvid.jfrog.io/assignment-docker/spring-petclinic:${{ github.sha }}
  
      - uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: /tmp/jfrog.cli.temp*

      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: spring-petclinic
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Bonus part: Publish the image to JFrog Artifactory in your pipeline (using the SaaS trial)
          jf docker push $IMAGE_NAME
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish

    