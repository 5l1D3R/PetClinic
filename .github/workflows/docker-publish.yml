name: Release version

on:
  push:
    branches: [ development, release-* ]

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Codestyle
        id: semantic
        run: |
          set -x
          function bump_version {
            # Split the version string into Major, Minor and Patch numbers
            local VERSION
            IFS='.' read -r -a VERSION <<< $(echo ${1//"v"})
            local BRANCH_NAME="$2"
            local MAJOR=${VERSION[0]}
            local MINOR=${VERSION[1]}
            local PATCH=${VERSION[2]}

            # Increment the version number
            if [[ "$BRANCH_NAME" == "development" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
              rc="-rc"
            elif [[ "$BRANCH_NAME" == release-* ]]; then
              PATCH=$((PATCH + 1))
              rc=""
            fi

            # Build the new version string
            echo "v${MAJOR}.${MINOR}.${PATCH}${rc}"
          }

          CURRENT_BRANCH=$(git symbolic-ref -q HEAD)
          CURRENT_BRANCH=${CURRENT_BRANCH##refs/heads/}
          CURRENT_BRANCH=${CURRENT_BRANCH:-HEAD}
          git fetch --tags

          TAGS=$(git tag)
          HAS_TAGS=$(echo "$TAGS" | wc -l | tr -d ' ')

          if [[ "$HAS_TAGS" -eq 0 ]]; then
            # No tags found
            if [[ "$CURRENT_BRANCH" == "development" ]]; then
              # For development branch with no tags, set the next version to 0.1.0-rc
              NEXT_VERSION="v0.1.0-rc"
            fi
          else
            # Tags found
            if [[ "$CURRENT_BRANCH" == "development" ]]; then
              CURRENT_VERSION=$(git tag | sort -V | tail -1)
              NEXT_VERSION=$(bump_version "${CURRENT_VERSION}" "${CURRENT_BRANCH}")
            elif [[ "${CURRENT_BRANCH}" == release-* ]]; then
              # For release branch with tags, bump patch version, e.g. v2.3.4 -> v2.3.5
              CURRENT_VERSION=$(git tag | grep "^v${CURRENT_BRANCH#'release-'}.*" | sort -V | tail -1)
              if [[ -n "$CURRENT_VERSION" ]]; then
                NEXT_VERSION=$(bump_version "${CURRENT_VERSION}" "${CURRENT_BRANCH}")
              else
                # If no tags match the release branch, set the next version to release number with 0 patch version, e.g. v-0.1.0
                NEXT_VERSION="v${BRANCH_VERSION}.0"
              fi
            else
              exit 2
            fi
          fi

          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT

          #- uses: docker://ghcr.io/codfish/semantic-release-action@sha256:4675eae74abbabc869298ca798833fef291ce30fb9edfac76787746e7d9d3904
          #  id: semantic
          #  with:
          #    branches: |
          #      [
          #        'release-*',
          #        {
          #          name: 'development',
          #          prerelease: true
          #        }
          #      ]
          #    additional_packages: |
          #      [
          #        "@semantic-release/changelog",
          #        "@semantic-release/git"
          #      ]
          #    plugins: |
          #      [
          #        "@semantic-release/commit-analyzer",
          #        "@semantic-release/changelog",
          #        "@semantic-release/git",
          #        "@semantic-release/github",
          #        "@semantic-release/release-notes-generator"
          #      ]
          #    dry_run: false
          #  env:
          #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            #- name: Login to GitHub Container Registry
            #  uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
            #  with:
            #    registry: ghcr.io
            #    username: ${{ github.actor }}
            #    password: ${{ secrets.GITHUB_TOKEN }}

            #- name: Build and push Docker image
            #  uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825
            #  with:
            #    context: .
            #    push: true
            #    tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.semantic.outputs.release-version }}
            #    labels: ${{ steps.meta.outputs.labels }}
            #    build-args: |
            #      VERSION=${{ steps.semantic.outputs.release-version }}

            #- name: Publish tag
            #  uses: rickstaa/action-create-tag@07b918ecbf94359b859f25f7a70553a84e804923
            #  with:
            #    tag: ${{ steps.semantic.outputs.release-version }}
            #    message: |
            #      ${{ steps.semantic.outputs.name }}

            #      ${{ steps.semantic.outputs.release-notes }}
            #    #TODO: force_push_tag is true for debug purpose only
            #    force_push_tag: true

