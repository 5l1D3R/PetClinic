pipeline {
    environment {
    NEXUS_VERSION = "nexus3"
    NEXUS_PROTOCOL = "http"
    NEXUS_URL = "172.19.0.3:8281"
    NEXUS_REPOSITORY = "maven-releases"
    NEXUS_CREDENTIAL_ID = "deployment"//deployment user
    REGISTRY = "http://localhost:8281/repository/docker_releases/"
    REGISTRY_CREDENTIAL = "deployment"
    }
    triggers {

    }
    stages {
            stage('release') {
      steps {
        script {
          withCredentials([file(credentialsId: 'ngx', variable: 'ROOT_CERT'),file(credentialsId:'m2', variable: 'SETTINGS')]) {
          docker.image('maven:3.8.1-jdk-8').inside("-u root --network=circle_net") {
          sh 'cp $ROOT_CERT /usr/local/share/ca-certificates/ && update-ca-certificates && cp $SETTINGS /root/.m2'
          sh 'mvn release:perform'
        }
      }
      }
    }
 }
            stage('version') {//change version number
                    steps {
                     script { 
                          pom = readMavenPom file: "pom.xml";
                          echo: "***version ${pom.version}";
                          String xStr=${pom.version};
                          String remv_last = xStr.substring(xStr.indexOf("/") + 1);
                          int new_version=remv_last.toInteger()+1;
                     }
                     script {
                     VERSION_NUMBER = VersionNumber(versionNumberString: "${new_version}")
                     currentBuild.displayName = "${VERSION_NUMBER}"
                     sh "ant -Dversion=${VERSION_NUMBER} build"
                }
                    }

            }
             stage('publish to nexus') {
             steps {
                 script {
                     // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                     pom = readMavenPom file: "pom.xml";
                     // Find built artifact under target folder
                     filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                     // Print some info from the artifact found
                     echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                     // Extract the path from the File found
                     artifactPath = filesByGlob[0].path;
                     // Assign to a boolean response verifying If the artifact name exists
                     artifactExists = fileExists artifactPath;

                     if(artifactExists) {
                         echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                         nexusArtifactUploader(
                             nexusVersion: NEXUS_VERSION,
                             protocol: NEXUS_PROTOCOL,
                             nexusUrl: NEXUS_URL,
                             groupId: pom.groupId,
                             version: pom.version,
                             repository: NEXUS_REPOSITORY,
                             credentialsId: NEXUS_CREDENTIAL_ID,
                             artifacts: [
                                 // Artifact generated such as .jar, .ear and .war files.
                                 [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: artifactPath,
                                 type: pom.packaging],

                                 // Lets upload the pom.xml file for additional information for Transitive dependencies
                                 [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: "pom.xml",
                                 type: "pom"]
                             ]
                         );

                     } else {
                         error "*** File: ${artifactPath}, could not be found";
                     }
                 }

                }
            }
            stage('image build and load') {
    steps {
      script {}
        docker.build registry + ":${VERSION_NUMBER}"//change version number
      }
      script {
        docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
        dockerImage.push()
      }
    }
    }
    }

}